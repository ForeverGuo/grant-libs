import{_ as p,E as a,c as k,m as i,a as s,J as t,w as r,a4 as n,o as E}from"./chunks/framework.BZPRC472.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"spring/mvc.md","filePath":"spring/mvc.md","lastUpdated":1732099131000}'),d={name:"spring/mvc.md"},g=n("",9),o=i("h3",{id:"_1-4-编写-firstcontroller-在类上标注-controller-注解-纳入-ioc-容器",tabindex:"-1"},[s("1.4 编写 FirstController，在类上标注 @Controller 注解，纳入 IOC 容器 "),i("a",{class:"header-anchor",href:"#_1-4-编写-firstcontroller-在类上标注-controller-注解-纳入-ioc-容器","aria-label":'Permalink to "1.4 编写 FirstController，在类上标注 @Controller 注解，纳入 IOC 容器"'},"​")],-1),c=i("p",null,"当然 也可以用 @Component 注解进行标注 @Controller 只是@Component 的别名",-1),y=i("h3",{id:"_1-5-配置编写-springmvc-框架自己的配置文件",tabindex:"-1"},[s("1.5 配置编写 Springmvc 框架自己的配置文件 "),i("a",{class:"header-anchor",href:"#_1-5-配置编写-springmvc-框架自己的配置文件","aria-label":'Permalink to "1.5 配置编写 Springmvc 框架自己的配置文件"'},"​")],-1),u=n("",97),F=i("br",null,null,-1),v=i("br",null,null,-1),m=n("",5);function C(q,b,B,A,f,D){const l=a("url-pattern"),e=a("servlet-name"),h=a("User");return E(),k("div",null,[g,i("p",null,[s("重点："),t(l,null,{default:r(()=>[s(" / ")]),_:1}),s(" / 表示 除了访问 xxx.jsp 结尾的请求路径外的所有路径 也就是说 只要不是 JSP 访问路径，一定会走 DispatcherServlet")]),o,c,y,i("p",null,[s("配置文件默认的名字 "),t(e),s(" 配置文件默认存放的位置 WEB-INF 两个配置： 1 组件扫描 2 配置视图解析器")]),u,i("p",null,[s("这个类的实例封装了整个响应协议 包括 状态行 响应头 响应体; "),F,s(" 注意: 如果你要定制响应协议, 那么处理器的返回值类型必须是 ResponseEntity"),t(h),s(", "),v,s(" 泛型为什么是 User, 因为响应体的信息是 user 信息.")]),m])}const w=p(d,[["render",C]]);export{S as __pageData,w as default};
