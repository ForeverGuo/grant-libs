import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.BZPRC472.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"spring/springmvc.md","filePath":"spring/springmvc.md","lastUpdated":1734428611000}'),h={name:"spring/springmvc.md"},l=n(`<h2 id="springmvc-执行流程源码分析" tabindex="-1">springmvc 执行流程源码分析 <a class="header-anchor" href="#springmvc-执行流程源码分析" aria-label="Permalink to &quot;springmvc 执行流程源码分析&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 前端控制器 springmvc最核心的类</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DispatcherServlet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FrameworkServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 这个方法负责处理请求,一次请求, 调用一次Dispatcher方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doDispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">HttpServletRequest</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">HttpServletResponse</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 通过请求路径获取对应要执行的处理器</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 实际上返回的处理器执行链对象 (所有的处理器和拦截器对象)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HandlerExecutionChain mappedHandler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 根据处理器获取处理器适配器对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HandlerAdapter ha </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getHandlerAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mappedHandler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// handler就是controller</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 执行该请求对应的所有拦截器中的 preHandle 方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mappedHandler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">applyPreHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 调用处理器方法 返回modelAndView对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在这里进行的数据绑定,实际上调用处理器方法之前要给处理器方法传参</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 需要传参的话, 这个参数要经过一个复杂的数据绑定过程(将前端提交的表单转换成 pojo 对象)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ha.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response, mappedHandler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 执行该请求对应的所有拦截器中的 postHandle 方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mappedHandler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">applyPostHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(processedRequest, response, mv);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 处理分发结果(本质上就是响应浏览器)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">processDispatchResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(processedRequest, response, mappedHandler, mv, (Exception)dispatchException);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processDispatchResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">HttpServletRequest</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">HttpServletResponse</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, @Nullable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">HandlerExecutionChain</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mappedHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, @Nullable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ModelAndView</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, @Nullable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Exception</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 渲染操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mv, request, response);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 执行该请求中的所对应的所有拦截器的 afterCompletion 方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mappedHandler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">triggerAfterCompletion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response, (Exception)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ModelAndView</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">HttpServletRequest</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">HttpServletResponse</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 通过视图解析器解析, 返回视图view对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    View view </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolveViewName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(viewName, mv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getModelInternal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), locale, request);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 调用视图对象的渲染方法(完成响应)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    view.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getModelInternal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), request, response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  protected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolveViewName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> viewName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, @Nullable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Locale</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> locale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">HttpServletRequest</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 视图解析器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ViewResolver viewResolver;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 通过视图解析器解析返回视图对象 View</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    View view </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viewResolver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolveViewName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(viewName, locale);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 视图解析器接口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ViewResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  View </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolveViewName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> viewName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Locale</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> locale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) throws Exception;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 视图接口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> View</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@Nullable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ?&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">HttpServletRequest</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">HttpServletResponse</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) throws Exception;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 每一个接口都有接口下的实现类, 例如view接口实现类:ThymeleafView InternalResourceView</span></span></code></pre></div><h2 id="根据请求获取处理器执行链" tabindex="-1">根据请求获取处理器执行链 <a class="header-anchor" href="#根据请求获取处理器执行链" aria-label="Permalink to &quot;根据请求获取处理器执行链&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>springmvc 执行的第一步: <br> 通过处理器映射器找到请求路径对应的处理器方法 .</p></div><p>分析这一行代码:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HandlerExecutionChain mappedHandler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request);</span></span></code></pre></div><ol><li>HandlerExecutionChain - 处理器执行链对象</li><li>HandlerExecutionChain 中的属性</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HandlerExecutionChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 底层对应的是一个 handlerMethod 对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> final Object </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MethodHandler</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 该请求对应的所有拦截器按照顺序放到了ArrayList集合中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 所有的拦截器对象是在服务器启动时创建好的 .</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> final List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HandlerInterceptor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> interceptorList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="3"><li><p>handlerMethod 是什么 ?</p><p>handlerMethod 是最核心的要执行的目标, 翻译为: 处理器方法. <br> 注意:HandlerMethod 是在服务器启动时初始化 spring 容器的时候, 就已经创建好了. <br> 这个类当中的重要的属性包括: beanName 和 method <br> 例如下代码:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @Controller</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pulic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">User</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>那么以上代码对应了一个 HanlderMethod 对象 <br></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> public </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HanlderMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">beanName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;userController&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Method </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">loginMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div></li><li><p>getHandler(request);</p></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这个方法还是在 DispatcherServlet 类中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">protected HandlerExecutionChain </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest request) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.handlerMappings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Iterator var2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.handlerMappings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(var2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            HandlerMapping mapping </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (HandlerMapping)var2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 通过合适的 HandlerMapping 才能获取到 HandlerExecutionChain 对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 如果你处理器中使用了 @RequestMapping 注解, 那么以下代码中的mapping是: requestMappingHandlerMapping</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            HandlerExecutionChain handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mapping.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handler;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>重点: <br> 处理第一步调用的是 :HandlerExecutionChain mappedHandler = getHandler(request) <br> 其本质上调用的是: HandlerExecutionChain handler = mapping.getHandler(request);</p><p>HandlerMapping 是接口: <br> 是处理器映射器, 专门负责映射的, 就是根据请求路径映射处理器方法的. <br> HandlerMapping 接口下有很多实现类: <br> 例如有名的且常用的: RequestMappingHandlerMapping <br> 这个 RequestMappingHandlerMapping 叫做: @RequestMapping 专用处理器映射器对象 <br> 如果不使用这个注解,就要进行 xml 文件进行配置, 就会使用其他的映射器处理器实现类 <br> HandlerMapping 对象 是在服务器启动阶段进行创建的, 所有的 HandlerMapping 对象都是在服务器启动创建,并且存放在集合中. <br></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DispatcherServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HandlerMapping</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> handlerMappings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="5"><li><p>requestMappingHandlerMapping 中的 getHandler(request) HandlerExecutionChain handler = mapping.getHandler(request); <br></p><p>mapping.getHandler(request) 方法一定是获取了 HandlerMethod 将其赋值给 HandlerExecutionChain 中的 handler 属性.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> public </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RequestMappingHandlerMapping</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbstractHandlerMethodMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> registerMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">RequestMappingInfo</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Object</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Method</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mapping, handler, method);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateConsumesCondition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mapping, method);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> public </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbstractHandlerMethodMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> registerMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">T</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Object</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Method</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.mappingRegistry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mapping, handler, method);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">T</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Object</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Method</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     HandlerMethod handlerMethod </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createHandlerMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handler, method);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   protected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HandlerMethod </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createHandlerMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Object</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Method</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (handler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> beanName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 服务器启动时执行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HandlerMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beanName, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">obtainApplicationContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAutowireCapableBeanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">obtainApplicationContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), method);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HandlerMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handler, method);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>这一步牵连到的类: <br></p><ul><li>HandlerExecutionChain 处理器执行链</li><li>HanlderMethod - 处理器方法</li><li>HandlerInterceptor - list 中的拦截器</li><li>HandlerMapping <ul><li>requestMappingHandlerMapping (HandlerMapping 接口的实现)</li></ul></li></ul></li></ol><h2 id="dispatcherservlet-流程概述" tabindex="-1">DispatcherServlet 流程概述 <a class="header-anchor" href="#dispatcherservlet-流程概述" aria-label="Permalink to &quot;DispatcherServlet 流程概述&quot;">​</a></h2><p>用户发起请求, DispatcherServlet(前端控制器) 拦截到请求, 通过处理器映射器(handlerMapping),返回一个 handler 处理器(实质是一个 handlerExecutionChain), 根据返回的 handler, 来获取适合的 handlerAdapter 处理器适配器,下面进行 preHandler, 根据 handlerAdapter 来调用处理器方法(参数处理,绑定), 返回逻辑视图名称给到 处理器适配器, 然后处理器适配器根据逻辑视图名称, 返回 MV(modelAndView),给到前端控制器, 前端控制利用视图解析器 ViewResolver, 解析出视图对象 View, 返回给前端控制器, 接下来根据 View 视图解析对象,进行渲染,</p><h3 id="服务器启动" tabindex="-1">服务器启动 <a class="header-anchor" href="#服务器启动" aria-label="Permalink to &quot;服务器启动&quot;">​</a></h3><ol><li>初始化 spring 上下文, 也就是创建所有的 Bean, 让 IOC 容器将其管理起来</li><li>初始化 springMVC 相关的对象: 处理器映射器, 处理器适配器 等</li></ol>`,18),p=[l];function t(k,e,E,r,d,g){return a(),i("div",null,p)}const c=s(h,[["render",t]]);export{F as __pageData,c as default};
