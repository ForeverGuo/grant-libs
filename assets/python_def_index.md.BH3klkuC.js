import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.BZPRC472.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"python/def/index.md","filePath":"python/def/index.md","lastUpdated":1722304394000}'),l={name:"python/def/index.md"},t=n(`<h2 id="函数定义" tabindex="-1">函数定义 <a class="header-anchor" href="#函数定义" aria-label="Permalink to &quot;函数定义&quot;">​</a></h2><ul><li>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()</li><li>参数和字变量必须放在圆括号中间，定义参数</li><li>return[表达式] 结束函数，不带表达式的 return 相当于返回 None</li></ul><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">def </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">functionname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;函数_字符串&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  function_suite</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [expression]</span></span></code></pre></div><h2 id="可更改-mutable-与-不可更改-immutable-对象" tabindex="-1">可更改(mutable) 与 不可更改(immutable)对象 <a class="header-anchor" href="#可更改-mutable-与-不可更改-immutable-对象" aria-label="Permalink to &quot;可更改(mutable) 与 不可更改(immutable)对象&quot;">​</a></h2><ul><li>strings, tuples 和 numbers 是不可更改的对象</li><li>list，dict 等则是可以修改的对象</li></ul><h2 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h2><ul><li><p>必备参数 <br></p><p>必备参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样 <br></p></li><li><p>关键字参数</p><p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。<br></p></li><li><p>默认参数</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">def </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( name, age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 35</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   &quot;打印任何传入的字符串&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   print </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Name: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   print </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Age &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用printinfo函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;miki&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;miki&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span></code></pre></div><ul><li><p>不定长参数</p><p>处理多个参数，加了星号（*）的变量名会存放所有未命名的变量参数 <br></p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可写函数说明</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">def </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( arg1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vartuple ):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   &quot;打印任何传入的参数&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   print </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;输出: &quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   print arg1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   for </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vartuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      print </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   return</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用printinfo 函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printinfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">70</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span></code></pre></div><h2 id="匿名函数" tabindex="-1">匿名函数 <a class="header-anchor" href="#匿名函数" aria-label="Permalink to &quot;匿名函数&quot;">​</a></h2><ul><li>lambda 只是一个表达式，函数体比 def 简单很多</li><li>lambda 主体是一个表达式，而不是一个代码块</li><li>lambda 函数拥有自己的命名空间，且不能访问自有参数列表或 全局命名空间的参数</li></ul>`,13),p=[t];function h(e,k,r,d,E,o){return a(),i("div",null,p)}const u=s(l,[["render",h]]);export{c as __pageData,u as default};
