import{_ as i,c as a,o as e,a4 as l}from"./chunks/framework.BZPRC472.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"spring/aop.md","filePath":"spring/aop.md","lastUpdated":1726743537000}'),t={name:"spring/aop.md"},o=l('<h2 id="aop-aspect-oriented-programming" tabindex="-1">AOP(aspect Oriented Programming) <a class="header-anchor" href="#aop-aspect-oriented-programming" aria-label="Permalink to &quot;AOP(aspect Oriented Programming)&quot;">​</a></h2><p>将我们的业务逻辑当中的非业务逻辑代码(交叉业务)包括 安全，记录日志，事物 相关的代码的提取出来，形成一个横向的切面，然后把业务逻辑看成是纵向的话，然后我们以横向交叉的方式应用到业务流程当中的过程 就叫做 AOP</p><ul><li>面向切面编程，面向方面编程</li><li>对 OOP 编程的补充</li><li>底层实现是采用动态代理</li><li>在你的业务流程当中，和你的业务不相关的，非业务逻辑通用代码</li></ul><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>代码复用性增强</li><li>代码易维护</li><li>使开发者更关注业务逻辑</li></ul><h2 id="切面编程七大术语" tabindex="-1">切面编程七大术语 <a class="header-anchor" href="#切面编程七大术语" aria-label="Permalink to &quot;切面编程七大术语&quot;">​</a></h2><p>放通知代码的地方就是连接点，被放通知代码的那段业务方法叫切点 把通知代码放在这段业务上的这个动作就叫织入，两个形成的这种模式就叫切面</p><ul><li><p>连接点 JoinPoint 在程序的整个执行过程中，可以织入切面的位置，方法的执行前后，异常抛出之后等位置</p></li><li><p>切点 Pointcut 真正织入切面的方法</p></li><li><p>通知 Advice 又叫 增强 事物，日志，安全代码，具体的代码就是通知 通知的方式：</p><ol><li>前置</li><li>后置</li><li>环绕</li><li>异常</li><li>最终</li></ol></li><li><p>切面 aspect 切点 + 通知 就是切面</p></li><li><p>织入 weaving 把通知应用到目标对象上的过程</p></li><li><p>代理对象 Proxy 一个目标对象被织入通知后产生的新对象</p></li><li><p>目标对象 Target 被织入通知的对象</p></li></ul><h2 id="切点表达式" tabindex="-1">切点表达式 <a class="header-anchor" href="#切点表达式" aria-label="Permalink to &quot;切点表达式&quot;">​</a></h2><p>用来定义通知 advice 往哪些方法上切入</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;execution(修饰符 返回值类型 全限定类名 方法名(形式参数列表))&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div>',11),s=[o];function p(r,n,c,d,h,u){return e(),a("div",null,s)}const g=i(t,[["render",p]]);export{m as __pageData,g as default};
