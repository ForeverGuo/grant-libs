import{_ as i,c as s,o as a,a4 as l}from"./chunks/framework.MxCO_SW-.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"python/base/index.md","filePath":"python/base/index.md","lastUpdated":1722991828000}'),n={name:"python/base/index.md"},t=l(`<h2 id="字面量" tabindex="-1">字面量 <a class="header-anchor" href="#字面量" aria-label="Permalink to &quot;字面量&quot;">​</a></h2><h3 id="掌握字面量的含义" tabindex="-1">掌握字面量的含义 <a class="header-anchor" href="#掌握字面量的含义" aria-label="Permalink to &quot;掌握字面量的含义&quot;">​</a></h3><ul><li>代码中被写来的固定的词</li></ul><h3 id="了解常见的字面量" tabindex="-1">了解常见的字面量 <a class="header-anchor" href="#了解常见的字面量" aria-label="Permalink to &quot;了解常见的字面量&quot;">​</a></h3><h3 id="基于-print-语句完成各类字面量的输出" tabindex="-1">基于 print 语句完成各类字面量的输出 <a class="header-anchor" href="#基于-print-语句完成各类字面量的输出" aria-label="Permalink to &quot;基于 print 语句完成各类字面量的输出&quot;">​</a></h3><h2 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h2><ul><li>单行注释</li><li>多行注视</li></ul><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><ul><li>在程序运行时，能储存计算结果或能表示值的抽象概念</li></ul><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><ul><li>整型</li><li>浮点型</li><li>复数</li><li>布尔型</li><li>字符串</li><li>列表</li><li>元组</li><li>集合</li><li>字典</li></ul><div class="language-tip vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tip</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>变量无类型，数据有类型</span></span></code></pre></div><h2 id="数据类型转换" tabindex="-1">数据类型转换 <a class="header-anchor" href="#数据类型转换" aria-label="Permalink to &quot;数据类型转换&quot;">​</a></h2><ul><li>字符串，整数，浮点数之间进行相互转换</li><li>int(x) 将 x 转换为整数</li><li>float(x) 将 x 转换为浮点数</li><li>str(x) 将 x 转换为字符串</li></ul><h2 id="标识符" tabindex="-1">标识符 <a class="header-anchor" href="#标识符" aria-label="Permalink to &quot;标识符&quot;">​</a></h2><ul><li><p>用户在编程过程中，使用的一系列名字，用于给边量，类，方法等命名</p></li><li><p>命名规则：</p><ol><li>内容限定（英文，中文，数字，下划线），数字不可以开头</li><li>大小写敏感</li><li>不可使用关键字</li></ol></li></ul><h2 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h2><ol><li><ul><li>加法</li></ul></li><li><ul><li>减法</li></ul></li><li><ul><li>乘法</li></ul></li><li>/ 除法</li><li>// 取整除</li><li>% 取余</li><li>** 指数</li></ol><h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h2><h3 id="字符串扩展" tabindex="-1">字符串扩展 <a class="header-anchor" href="#字符串扩展" aria-label="Permalink to &quot;字符串扩展&quot;">​</a></h3><ul><li>单引号 &#39;&#39;</li><li>双引号 &quot;&quot;</li><li>三引号 &quot;&quot;&quot;</li></ul><h3 id="字符串格式化" tabindex="-1">字符串格式化 <a class="header-anchor" href="#字符串格式化" aria-label="Permalink to &quot;字符串格式化&quot;">​</a></h3><ul><li>% 表示 占位</li><li>s 表示 将变量变成字符串放入占位的地方</li><li>数字精度控制（m.n 的形式控制数据的宽度和精度）： <ol><li>m: 设置的宽度小于数字自身，不生效</li><li>n: 控制小数点精度，要求是数字，会进行小数的四舍五入</li></ol></li><li>f&quot;内容{变量}&quot;的格式进行格式化</li><li>表达式进行字符串格式化</li></ul><h2 id="数据输入" tabindex="-1">数据输入 <a class="header-anchor" href="#数据输入" aria-label="Permalink to &quot;数据输入&quot;">​</a></h2><ul><li>input(&quot;提示信息--&quot;) 键盘输入（输出类型固定是字符串类型）</li><li>print 内容输出</li></ul><h2 id="异常捕获" tabindex="-1">异常捕获 <a class="header-anchor" href="#异常捕获" aria-label="Permalink to &quot;异常捕获&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 基本异常</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 可能发生的错误代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">except</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 如果出现异常需要执行的代码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 捕获指定异常</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只捕获 nameError 错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">except NameError </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 捕获多个异常</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">except</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (NameError, ZeroDivisionError) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 捕获所有的异常</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">except Exception </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// else 没有异常会执行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">except Exception </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;没有异常执行&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;无论有没有异常都会执行&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li>异常具有传递性</li></ul>`,28),e=[t];function h(p,k,r,d,o,E){return a(),s("div",null,e)}const g=i(n,[["render",h]]);export{u as __pageData,g as default};
