import{_ as e,c as s,o as i,a4 as a}from"./chunks/framework.MxCO_SW-.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"python/crawler/index.md","filePath":"python/crawler/index.md","lastUpdated":1722304394000}'),t={name:"python/crawler/index.md"},l=a(`<h2 id="requests-beautifulsoup" tabindex="-1">requests + BeautifulSoup <a class="header-anchor" href="#requests-beautifulsoup" aria-label="Permalink to &quot;requests + BeautifulSoup&quot;">​</a></h2><h3 id="requests-常用方法" tabindex="-1">requests 常用方法 <a class="header-anchor" href="#requests-常用方法" aria-label="Permalink to &quot;requests 常用方法&quot;">​</a></h3><ul><li>GET 请求方式获取 URL 位置的资源</li><li>HEAD 获取资源的头部信息</li><li>POST 请求方式获取 URL 位置的资源</li></ul><h3 id="方法介绍" tabindex="-1">方法介绍 <a class="header-anchor" href="#方法介绍" aria-label="Permalink to &quot;方法介绍&quot;">​</a></h3><ul><li>基本语法</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;http://www.netbian.com/fengjing/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requests.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url);</span></span></code></pre></div><ul><li><p>常用参数</p><ol><li><p>url <br> 字符串类型，请求地址</p></li><li><p>params <br> 字典类型，用来携带查询参数 <br> 该方法会自动对 params 字典进行编码，然后和 url 拼接 <br> requests.get(url, params)</p></li><li><p>headers <br> 字典类型，请求头，用来携带请求头部信息 <br></p></li><li><p>cookies<br> 字典类型，携带登录状态等信息<br></p></li><li><p>proxies <br> 字典类型，用来设置代理 ip 服务器，获取和使用方法同上<br></p></li><li><p>timeout <br> 整数类型，用于设定请求超时时间，单位为妙 <br></p></li></ol></li><li><p>response 常用属性和方法</p><ol><li><p>status_code 属性 <br> http 请求的返回状态，若为 200 则表示请求成功 <br></p></li><li><p>text 属性 <br> http 响应内容的字符串形式，即返回的页面内容 <br></p></li><li><p>content 属性 <br> http 响应的二进制形式，语法同上 <br></p></li><li><p>encoding 属性 <br> 用来设置 response 的编码形式，如果请求的页面中包含中文，那么就需要设置 encoding 属性 <br></p></li><li><p>raise_for_status() 方法 <br> 该方法判断 status_code 是否等于 200，如果不等于，则抛出异常。<br></p></li><li><p>json() 方法 <br> 获取 http 响应内容的 json 格式数据</p></li></ol></li></ul><h2 id="selenium-pyquery" tabindex="-1">selenium + PyQuery <a class="header-anchor" href="#selenium-pyquery" aria-label="Permalink to &quot;selenium + PyQuery&quot;">​</a></h2>`,8),r=[l];function p(n,o,h,u,d,c){return i(),s("div",null,r)}const _=e(t,[["render",p]]);export{k as __pageData,_ as default};
