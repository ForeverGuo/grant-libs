import{_ as i,c as l,o as e,a4 as r}from"./chunks/framework.BZPRC472.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"spring/index.md","filePath":"spring/index.md","lastUpdated":1724983607000}'),n={name:"spring/index.md"},s=r('<h2 id="spring-框架-ioc-和-aop" tabindex="-1">spring 框架（IOC 和 AOP） <a class="header-anchor" href="#spring-框架-ioc-和-aop" aria-label="Permalink to &quot;spring 框架（IOC 和 AOP）&quot;">​</a></h2><ul><li><p>控制反转思想 spring 帮你 new 对象 spring 帮你维护对象和对象之间的关系</p></li><li><p>实现 IOC 思想的容器</p><ol><li>控制反转的实现有多种，其中比较重要的是依赖注入（DI）</li><li>控制反转是思想，依赖注入是这种思想的具体实现。</li><li>依赖注入 DI，常见的两种方式：</li></ol><ul><li>set 注入（执行 set 方法给属性赋值）</li><li>构造方法输入（执行构造方法给属性赋值）</li></ul><ol start="4"><li>依赖，注入分别是什么意思？</li></ol><ul><li>依赖：A 对象和 B 对象的关系</li><li>注入：一种手段，可以让 A 对象和 B 对象产生关系</li><li>依赖注入： 对象 A 和对象 B 之间的关系，靠注入的手段来维护，而注入包括，set 注入和构造注入</li></ul></li><li><p>专业术语</p><ol><li>OCP：开闭原则</li><li>依赖倒置原则</li><li>IoC：控制反转</li><li>依赖注入（控制反转思想的具体实现）</li></ol></li></ul><h2 id="spring8-大模块" tabindex="-1">spring8 大模块 <a class="header-anchor" href="#spring8-大模块" aria-label="Permalink to &quot;spring8 大模块&quot;">​</a></h2><ol><li>spring Core: 提供 IoC 容器的实现和支持</li><li>spring AOP: 实现面向切面编程的支持</li><li>spring Web MVC: 提供基于 MVC 架构的 Web 应用程序</li><li>spring WebFlux: 响应式 Web 开发模块，基于反应式编程模型处理 Web 请求</li><li>spring Web: Web 应用程序支持模块，提供与 Servlet API 等 Web 相关技术的集成</li><li>spring DAO: 提供对数据访问对象的支持</li><li>spring ORM: 为流行的 ORM 框架提供集成方案</li><li>spring Context: 提供应用程序上下文的创建和管理功能</li></ol>',4),t=[s];function a(o,p,_,c,d,g){return e(),l("div",null,t)}const b=i(n,[["render",a]]);export{u as __pageData,b as default};
