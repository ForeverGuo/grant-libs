import{_ as a,c as t,o,a4 as l}from"./chunks/framework.BZPRC472.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"python/module/index.md","filePath":"python/module/index.md","lastUpdated":1722991828000}'),e={name:"python/module/index.md"},i=l(`<h2 id="import-语句" tabindex="-1">import 语句 <a class="header-anchor" href="#import-语句" aria-label="Permalink to &quot;import 语句&quot;">​</a></h2><ul><li>[from 模块名] import [ 模块 ｜ 类 ｜ 变量 ｜ 函数 ｜ *] [ as 别名]</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// from math import *;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math;</span></span></code></pre></div><h2 id="搜索路径" tabindex="-1">搜索路径 <a class="header-anchor" href="#搜索路径" aria-label="Permalink to &quot;搜索路径&quot;">​</a></h2><ul><li>当前目录</li><li>如果不在当前目录，搜索在 shell 变量 PYTHNPATH 下的每个目录</li><li>如果都找不到，会查看默认路径。UNIX 下，默认路径一般为 /usr/local/lib/python</li></ul><h2 id="命名空间和作用域" tabindex="-1">命名空间和作用域 <a class="header-anchor" href="#命名空间和作用域" aria-label="Permalink to &quot;命名空间和作用域&quot;">​</a></h2><p>变量是拥有匹配对象的名字（标识符）。命名空间是一个包含了变量名称们（键）和它们各自相应的对象们（值）的字典。<br></p><p>一个 Python 表达式可以访问局部命名空间和全局命名空间里的变量。如果一个局部变量和一个全局变量重名，则局部变量会覆盖全局变量。<br></p><h2 id="dir-函数" tabindex="-1">dir 函数 <a class="header-anchor" href="#dir-函数" aria-label="Permalink to &quot;dir 函数&quot;">​</a></h2><p>dir() 函数一个排好序的字符串列表，内容是一个模块里定义过的名字。</p><h2 id="globals-和-locals-函数" tabindex="-1">globals() 和 locals() 函数 <a class="header-anchor" href="#globals-和-locals-函数" aria-label="Permalink to &quot;globals() 和 locals() 函数&quot;">​</a></h2><p>根据调用地方的不同，globals() 和 locals() 函数可被用来返回全局和局部命名空间里的名字。</p><h2 id="reload-函数" tabindex="-1">reload 函数 <a class="header-anchor" href="#reload-函数" aria-label="Permalink to &quot;reload 函数&quot;">​</a></h2><p>当一个模块被导入到一个脚本，模块顶层部分的代码只会被执行一次。<br> 如果你想重新执行模块里顶层部分的代码，可以用 reload() 函数</p><h2 id="python-中的包" tabindex="-1">python 中的包 <a class="header-anchor" href="#python-中的包" aria-label="Permalink to &quot;python 中的包&quot;">​</a></h2><p>包是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的 Python 的应用环境。<br> 简单来说，包就是文件夹，但该文件夹下必须存在 <strong>init</strong>.py 文件, 该文件的内容可以为空。<strong>init</strong>.py 用于标识当前文件夹是一个包。</p><ul><li>自定义包</li></ul><h2 id="自定义模块" tabindex="-1">自定义模块 <a class="header-anchor" href="#自定义模块" aria-label="Permalink to &quot;自定义模块&quot;">​</a></h2><ul><li><p>创建自定义 python 文件即可</p></li><li><p>&quot;<strong>name</strong>&quot; 为内部变量，当该文件执行是 &quot;<strong>name</strong> = <strong>main</strong>&quot;</p></li><li><p>&quot;<strong>all</strong> = []&quot; 代表 import * 的内容</p></li></ul>`,19),r=[i];function s(n,h,p,d,c,u){return o(),t("div",null,r)}const g=a(e,[["render",s]]);export{b as __pageData,g as default};
