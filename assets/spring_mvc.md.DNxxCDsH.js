import{_ as p,E as a,c as h,m as i,a as s,J as t,w as k,a4 as l,o as r}from"./chunks/framework.BZPRC472.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"spring/mvc.md","filePath":"spring/mvc.md","lastUpdated":1731491673000}'),E={name:"spring/mvc.md"},d=l('<h2 id="springmvc" tabindex="-1">springMVC <a class="header-anchor" href="#springmvc" aria-label="Permalink to &quot;springMVC&quot;">​</a></h2><ul><li>一个实现了 MVC 框架模式的 Web 框架，底层基于 Servlet 实现。</li></ul><h3 id="帮助我们做了什么" tabindex="-1">帮助我们做了什么 ？ <a class="header-anchor" href="#帮助我们做了什么" aria-label="Permalink to &quot;帮助我们做了什么 ？&quot;">​</a></h3><ol><li>入口控制：SpringMVC 框架通过 DispatcherServlet 作为入口控制器，负责接收请求和分发请求。而在 Servlet 开发中，需要自己编写 Servlet 程序，并在 web.xml 中进行配置，才能接受和处理请求。</li><li>在 SpringMVC 中，表单提交时可以自动将表单数据绑定到相应的 JavaBean 对象中，只需要在控制器方法的参数列表中声明该 JavaBean 对象即可，无需手动获取和赋值表单数据。而在纯粹的 Servlet 开发中，这些都是需要自己手动完成的。</li><li>IoC 容器：SpringMVC 框架通过 IoC 容器管理对象，只需要在配置文件中进行相应的配置即可获取实例对象，而在 Servlet 开发中需要手动创建对象实例。</li><li>统一处理请求：SpringMVC 框架提供了拦截器、异常处理器等统一处理请求的机制，并且可以灵活地配置这些处理器。而在 Servlet 开发中，需要自行编写过滤器、异常处理器等，增加了代码的复杂度和开发难度。</li><li>视图解析：SpringMVC 框架提供了多种视图模板，如 JSP、Freemarker、Velocity 等，并且支持国际化、主题等特性。而在 Servlet 开发中需要手动处理视图层，增加了代码的复杂度。</li></ol><h3 id="第一个-spring-mvc-的开发流程" tabindex="-1">第一个 Spring MVC 的开发流程 <a class="header-anchor" href="#第一个-spring-mvc-的开发流程" aria-label="Permalink to &quot;第一个 Spring MVC 的开发流程&quot;">​</a></h3><ol><li>创建一个空的工程</li><li>设置 JDK 版本</li><li>设置 maven 版本</li><li>创建 maven 模块</li><li>在 pom 文件设置打包方式 war 方式</li><li>引入依赖 springmvc 依赖 logback 依赖 thymeleaf 和 spring6 整合 servlet 依赖（scope 设置 provided 表示这个依赖由第三方容器来提供）</li></ol><h3 id="_1-2-给-maven-模块添加-web-支持" tabindex="-1">1.2 给 Maven 模块添加 web 支持 <a class="header-anchor" href="#_1-2-给-maven-模块添加-web-支持" aria-label="Permalink to &quot;1.2 给 Maven 模块添加 web 支持&quot;">​</a></h3><p>在模块 src/main 目录下新建 webapp 目录 （默认是带有小蓝点 没有需要自己添加 module 设置 ） 另外需要添加 web.xml 文件 注意添加的路径</p><h3 id="_1-3-在-web-xml-文件中配置前端控制器-springmvc-内置的一个类-dispatchservlet-所有的请求都应该经过-dispatcherservlet-处理" tabindex="-1">1.3 在 web.xml 文件中配置前端控制器（springmvc 内置的一个类 DispatchServlet）所有的请求都应该经过 DispatcherServlet 处理 <a class="header-anchor" href="#_1-3-在-web-xml-文件中配置前端控制器-springmvc-内置的一个类-dispatchservlet-所有的请求都应该经过-dispatcherservlet-处理" aria-label="Permalink to &quot;1.3 在 web.xml 文件中配置前端控制器（springmvc 内置的一个类 DispatchServlet）所有的请求都应该经过 DispatcherServlet 处理&quot;">​</a></h3>',9),o=i("h3",{id:"_1-4-编写-firstcontroller-在类上标注-controller-注解-纳入-ioc-容器",tabindex:"-1"},[s("1.4 编写 FirstController，在类上标注 @Controller 注解，纳入 IOC 容器 "),i("a",{class:"header-anchor",href:"#_1-4-编写-firstcontroller-在类上标注-controller-注解-纳入-ioc-容器","aria-label":'Permalink to "1.4 编写 FirstController，在类上标注 @Controller 注解，纳入 IOC 容器"'},"​")],-1),g=i("p",null,"当然 也可以用 @Component 注解进行标注 @Controller 只是@Component 的别名",-1),c=i("h3",{id:"_1-5-配置编写-springmvc-框架自己的配置文件",tabindex:"-1"},[s("1.5 配置编写 Springmvc 框架自己的配置文件 "),i("a",{class:"header-anchor",href:"#_1-5-配置编写-springmvc-框架自己的配置文件","aria-label":'Permalink to "1.5 配置编写 Springmvc 框架自己的配置文件"'},"​")],-1),u=l(`<h3 id="_1-6-提供视图" tabindex="-1">1.6 提供视图 <a class="header-anchor" href="#_1-6-提供视图" aria-label="Permalink to &quot;1.6 提供视图&quot;">​</a></h3><p>在 WEB-INF/templates 目录下新建 first.html 文件 编写符合 html 模版的字符串</p><h3 id="_1-7-提供请求映射" tabindex="-1">1.7 提供请求映射 <a class="header-anchor" href="#_1-7-提供请求映射" aria-label="Permalink to &quot;1.7 提供请求映射&quot;">​</a></h3><p>最终返回逻辑视图名称 逻辑视图名称：first 物理视图名称：前缀 + first + 后缀 最终路径： /WEB-INF/templates/first.html</p><h3 id="关于-requestmapping-注解的-value-属性" tabindex="-1">关于@RequestMapping 注解的 value 属性 <a class="header-anchor" href="#关于-requestmapping-注解的-value-属性" aria-label="Permalink to &quot;关于@RequestMapping 注解的 value 属性&quot;">​</a></h3><p>value 属性本身是一个 String[] 字符串数组，说明多个请求可以映射同一个处理器方法 <br> 如果注解的属性是数组，并且在使用注解的时候，该数组只有一个元素，大括号可以省略 <br> 如果使用某个注解的时候，如果只使用一个 value 属性，那么 value 也是可以省略的 <br> value 属性的别名是 path <br> path 属性的别名是 value</p><h3 id="requestmapping-的-value-属性支持-ant-风格的-支持模糊匹配的路径" tabindex="-1">RequestMapping 的 value 属性支持 Ant 风格的 支持模糊匹配的路径 <a class="header-anchor" href="#requestmapping-的-value-属性支持-ant-风格的-支持模糊匹配的路径" aria-label="Permalink to &quot;RequestMapping 的 value 属性支持 Ant 风格的 支持模糊匹配的路径&quot;">​</a></h3><p>? 表示任意一个字符</p><ul><li>表示 0 到 N 个任意字符 (排除&#39;/&#39; &#39;?&#39;) ** 表示 0 到 N 个任意字符 ，可以出现路径分隔符 注意 ** 左边只能 &#39;/&#39; spring6 只能是末尾出现</li></ul><h3 id="关于-requestmapping-注解的-value-属性占位符-重点" tabindex="-1">关于@RequestMapping 注解的 value 属性占位符（重点） <a class="header-anchor" href="#关于-requestmapping-注解的-value-属性占位符-重点" aria-label="Permalink to &quot;关于@RequestMapping 注解的 value 属性占位符（重点）&quot;">​</a></h3><p>现在流行 RESTFUL 风格的 URL：/springmvc/login/admin/123</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login/{username}/{password}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testRESTFulURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PathVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       String username,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PathVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       String password) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; password: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> password);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;ok&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="关于-requestmapping-注解的-method-属性-通过该属性限制前端请求方式-如果请求方式不同-则会报-405-错误" tabindex="-1">关于@RequestMapping 注解的 method 属性，通过该属性限制前端请求方式，如果请求方式不同，则会报 405 错误 <a class="header-anchor" href="#关于-requestmapping-注解的-method-属性-通过该属性限制前端请求方式-如果请求方式不同-则会报-405-错误" aria-label="Permalink to &quot;关于@RequestMapping 注解的 method 属性，通过该属性限制前端请求方式，如果请求方式不同，则会报 405 错误&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/user/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { RequestMethod.GET, RequestMethod.POST })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">userLogin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;处理登陆的业务逻辑...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ok&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="衍生-mapping" tabindex="-1">衍生 Mapping <a class="header-anchor" href="#衍生-mapping" aria-label="Permalink to &quot;衍生 Mapping&quot;">​</a></h3><ul><li>@PostMapping</li><li>@GetMapping</li></ul><h3 id="web-的请求方式" tabindex="-1">web 的请求方式 <a class="header-anchor" href="#web-的请求方式" aria-label="Permalink to &quot;web 的请求方式&quot;">​</a></h3><p>GET POST PUT DELETE HEAD</p><h3 id="关于-requestmapping-注解的-params-属性" tabindex="-1">关于 requestMapping 注解的 params 属性 <a class="header-anchor" href="#关于-requestmapping-注解的-params-属性" aria-label="Permalink to &quot;关于 requestMapping 注解的 params 属性&quot;">​</a></h3><h3 id="关于-requestmapping-注解的-headers-属性" tabindex="-1">关于 requestMapping 注解的 headers 属性 <a class="header-anchor" href="#关于-requestmapping-注解的-headers-属性" aria-label="Permalink to &quot;关于 requestMapping 注解的 headers 属性&quot;">​</a></h3><h3 id="获取请求的数据" tabindex="-1">获取请求的数据 <a class="header-anchor" href="#获取请求的数据" aria-label="Permalink to &quot;获取请求的数据&quot;">​</a></h3><ol><li>servlet API</li></ol><p>在处理器方法参数上，HttpServletRequest springMvc 框架将自动将 Tomcat 服务器创建的 request 对象传递给处理器方法 我们直接在方法中使用 equest 对象即可。</p><ol start="2"><li>注解 @requestParam</li></ol><p>属性 value name required：设置该参数是否必传，如果该属性没传则提示 400 这个属性类似于 @RequestMapping 注解中的 params 可以设置为 false，则该参数不是必传 不会报 400，但是前端没有提供这个属性，默认为 null defaultValue：如果前端没有提供参数，可以设置该参数的默认值</p><ol start="3"><li>行参名来接收，如果方法行参的名字和提交数据时的 name 相同，则@RequestParam 可省略</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">如果使用的是spring6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">版本，则需要在pom文件上添加如下：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.apache.maven.plugins&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;maven-compiler-plugin&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;3.13.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;17&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;17&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">compilerArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;-parameters&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">compilerArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">注意：如果 控制器上的行参名 和 请求参数名 不一致，那么控制器上的行参默认值是 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span></code></pre></div><ol start="4"><li>使用 POJO 类/JavaBean 接收请求参数（常用）</li></ol><p>底层实现：反射机制 不过使用前提是：POJO 类的属性名和请求参数名一致 实现原理是什么？ 假设提交一个请求，参数名是 username，那么 POJO 类必须有一个属性名也叫作：username 根据 username 进行 setUsername 注入赋值</p><p>重点：底层通过反射机制调用 set 方法给属性赋值，所以 set 方法名非常重要。 如果前端提交参数是 username，那么 POJO 类中必须有 seUsername 方法</p><h3 id="获取请求头信息" tabindex="-1">获取请求头信息 ？ <a class="header-anchor" href="#获取请求头信息" aria-label="Permalink to &quot;获取请求头信息 ？&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">使用@RequestHeader注解获取</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Referer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,required </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, defaultValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="获取客户端提交的-cookie" tabindex="-1">获取客户端提交的 Cookie ？ <a class="header-anchor" href="#获取客户端提交的-cookie" aria-label="Permalink to &quot;获取客户端提交的 Cookie ？&quot;">​</a></h3><p>使用@CookieValue 注解 获取控制器方法上的行参</p><h3 id="关于-javaweb-项目-如何解决-post-请求乱码问题" tabindex="-1">关于 javaweb 项目，如何解决 post 请求乱码问题？ <a class="header-anchor" href="#关于-javaweb-项目-如何解决-post-请求乱码问题" aria-label="Permalink to &quot;关于 javaweb 项目，如何解决 post 请求乱码问题？&quot;">​</a></h3><p>request.setCharacterEncoding(&quot;utf-8&quot;); 但是该执行语句必须在 request.getParameter(&quot;&quot;)之前执行才有效。 第一种：可以自己写 过滤器 Filter 第二种：使用 springmvc 内置的字符编码过滤器 CharacterEncodingFilter</p><h3 id="request-域数据共享" tabindex="-1">Request 域数据共享 <a class="header-anchor" href="#request-域数据共享" aria-label="Permalink to &quot;Request 域数据共享&quot;">​</a></h3><ul><li>第一种方式：在处理器方法上，添加 HttpServletRequest 参数即可</li><li>第二种方式：在 springmvc 的处理器方法上添加一个接口类型 Model （ui.Model）</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/testModel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Model model) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;testRequest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;testModel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    // 转</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">发</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ok&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>第三种方式：在 springmvc 的处理器方法上添加一个接口类型 Map</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/testMap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String, Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;testRequest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;testMap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ok&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>第四种方式：在 springmvc 的处理器方法上添加一个类 ModelMap</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/testModelMap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testModelMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ModelMap modelMap) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   modelMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;testRequest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;testModelMap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ok&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>研究下，Model 接口，Map 接口，ModelMap 类 三者之间的关系 ？<br></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>表面是使用的不同接口和不同的类，实际上使用的是同一个对象 org.springframework.validation.support.BindingAwareModelMap</p></div><ul><li>第五种方式: 使用 ModelAndView 类完成数据共享</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/testModelAndView&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public ModelAndView </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testModelAndView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 创建模型视图对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ModelAndView modelAndView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModelAndView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 给模型视图对象 绑定数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modelAndView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;testRequest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;testModelAndView&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 给模型视图对象 绑定 视图</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modelAndView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setViewName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ok&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 返回模型视图对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> modelAndView;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>聊一个真相:</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>对于处理器方法来说,不管使用的是 Model 对象,Map 对象, modelMap 类, ModelAndView 类,最终处理器方法执行 结束后,返回的都是 ModelAndView 对象,这个返回的 ModelAndView 对象给 DispatchServlet 类了 <br></p><p>当请求路径不是 JSP 的时候,都会走前端控制器 DispatchServlet. DispatchServlet 中有一个方法 doDispatch,这个方法通过请求路径找到 处理器方法, 然后调用处理器方法返回一个视图名称(也可能是一个 ModelAndView 对象),底层会将逻辑视图名称转换 为 view 对象,然后结合 Model 对象,封装一个 ModelAndView 对象,然后将该对象返回给 DispatchServlet 类.</p></div><h3 id="session-域数据存储" tabindex="-1">Session 域数据存储 <a class="header-anchor" href="#session-域数据存储" aria-label="Permalink to &quot;Session 域数据存储&quot;">​</a></h3><ul><li>第一种方式: 使用原生的 servlet API 实现(在处理器方法的参数上添加 httpSession 对象, springMVC 会自动将 session 对象传递给这个参数)</li><li>第二种方式: 使用@SessionAttributes 注解实现 session 域数据存储</li></ul><h3 id="application-域数据存储" tabindex="-1">Application 域数据存储 <a class="header-anchor" href="#application-域数据存储" aria-label="Permalink to &quot;Application 域数据存储&quot;">​</a></h3><p>这个域使用较少,如果使用的话,一般采用 Servlet API 的方式使用.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/testApplication&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testApplicaitonScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest request) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ServletContext application </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getServletContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    application.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;testApplication&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;testApplication&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ok&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="springmvc-中常用的视图" tabindex="-1">SpringMVC 中常用的视图 <a class="header-anchor" href="#springmvc-中常用的视图" aria-label="Permalink to &quot;SpringMVC 中常用的视图&quot;">​</a></h3><ul><li>InternalResourceView: 内部资源视图 (是- springMVC 内置的,专门用于解析 JSP 模版语法的, 另外也负责 转发 forward 功能实现)</li><li>RedirectView: 重定向视图 (是 springMVC 内置的, 专门负责 重定向 redirect 功能实现)</li><li>ThymeleafView: Thymeleaf 视图 (第三方, 专门负责解析 thymeleaf 模版语法) ...</li></ul><h3 id="实现视图的核心类和核心接口" tabindex="-1">实现视图的核心类和核心接口 <a class="header-anchor" href="#实现视图的核心类和核心接口" aria-label="Permalink to &quot;实现视图的核心类和核心接口&quot;">​</a></h3><ol><li>DispatcherServlet: 前端控制器 负责接收前端的请求 根据请求路径找到对应的处理器方法 执行处理器方法 并且最终返回 ModelAndView 对象. 再往下就是视图解析器</li><li>ViewSource 接口: 视图解析器接口 (ThymeleafViewResolver 实现了 ViewSource 接口, InternalResourceView 也是实现了 ViewSource 接口) 这个接口做什么 ? 这个接口的作用就是将 逻辑视图名称 转换为 物理视图名称 并且最终返回一个 View 接口对象 核心方法是什么 ? View resolveViewName(String viewName, Locale locale) throws Exception;</li><li>View 接口: 视图接口 这个接口做什么 ? 这个接口主要负责将模版语法的字符串转换为 html 代码, 并且将 html 代码响应给浏览器 (即渲染.) 核心方法是什么 ? void render(@Nullable Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response) throws Exception;</li></ol><h3 id="在-springmvc-中是怎么实现转发的" tabindex="-1">在 springMVC 中是怎么实现转发的 ? <a class="header-anchor" href="#在-springmvc-中是怎么实现转发的" aria-label="Permalink to &quot;在 springMVC 中是怎么实现转发的 ?&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 返回逻辑视图</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pageA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 注意:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">当 return pageA 的时候, 返回一个逻辑视图,这种方式跳转到视图</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">默认采用的是forward方式跳转过去的, 只不过这个底层创建的视图对象 是thymeleafView</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre></div><ul><li>怎么转发 ? 什么格式 ? &quot;return forward: /B&quot; 转发到 /B ,这是一次请求, 底层创建视图对象是, internalResourceView 对象</li><li>怎么重定向 ? 什么格式 ? &quot;return redirect: /B&quot; 转发到 /B ,发起两次请求,底层创建的是 RedirectView</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>总结: <br> 转发: &quot;return forward: /B&quot; ---&gt; internalResourceView <br> 重定向: &quot;return redirect: /B&quot; ---&gt; redirectView</p></div><h3 id="mvc-view-controller" tabindex="-1"><a href="mvc:view-controller" target="_blank" rel="noreferrer">mvc:view-controller</a> <a class="header-anchor" href="#mvc-view-controller" aria-label="Permalink to &quot;&lt;mvc:view-controller&gt;&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">INFO</p><p>这是个配置信息, 可以在 springmvc.xml 文件中进行配置, 作用是什么 ? 如果一个 Controller 上的方法是为了完成视图跳转,没有任何业务代码,那么这个 controller 可以不写. 直接在 springmvc.xml 中写上 &lt;mvc:view-controller /&gt; 注解即可.</p><p>&lt;mvc:view-controller path=&quot;/test&quot; view-name=&quot;test&quot; /&gt;</p></div><h3 id="mvc-annotation-driven" tabindex="-1">&lt;mvc:annotation-driven /&gt; <a class="header-anchor" href="#mvc-annotation-driven" aria-label="Permalink to &quot;&lt;mvc:annotation-driven /&gt;&quot;">​</a></h3><p>开启注解启动,会让整个项目中的注解再次开启.</p><h3 id="关于静态资源处理" tabindex="-1">关于静态资源处理. <a class="header-anchor" href="#关于静态资源处理" aria-label="Permalink to &quot;关于静态资源处理.&quot;">​</a></h3><ul><li>假如有静态文件 static,如果想要直接访问有两种解决方式: <ol><li>第一种: 开启默认的 Servlet 服务, 需要在 springmvc.xml 配置 开启静态资源访问<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">开启默认的defaultServlet 可以使用default访问静态资源</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">mvc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">default-servlet-handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">mvc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">annotation-driven</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div>Servlet 服务器默认先走 DispatcherServlet ,如果发生 404, 则会自动走 defaultServlet 服务帮你定位静态资源.</li><li>在 springmvc.xml 文件中 添加如下配置:</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">配置处理静态资源</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">mvc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">annotation-driven</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">mvc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapping</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/static/**&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/static/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div></li></ul><h2 id="restful-api" tabindex="-1">RESTful API <a class="header-anchor" href="#restful-api" aria-label="Permalink to &quot;RESTful API&quot;">​</a></h2><h3 id="什么是-restful" tabindex="-1">什么是 RESTful ? <a class="header-anchor" href="#什么是-restful" aria-label="Permalink to &quot;什么是 RESTful ?&quot;">​</a></h3><p>RESTful 是对 WEB 服务接口的设计风格,提供的一套约束,可以让 WEB 服务接口更加简洁, 易于理解. <br> RESTful 是表述性状态转移</p><ul><li>查询 get</li><li>新增 post</li><li>删除 delete</li><li>修改 put</li></ul><h3 id="restful-风格中要求-修改的时候-提交必须是一个-put-请求-怎么提交-put-请求" tabindex="-1">RESTful 风格中要求,修改的时候,提交必须是一个 PUT 请求, 怎么提交 PUT 请求 ? <a class="header-anchor" href="#restful-风格中要求-修改的时候-提交必须是一个-put-请求-怎么提交-put-请求" aria-label="Permalink to &quot;RESTful 风格中要求,修改的时候,提交必须是一个 PUT 请求, 怎么提交 PUT 请求 ?&quot;">​</a></h3><ol><li><p>要想发送 put 请求, 前提必须是一个 POST 请求</p></li><li><p>在 POST 请求中添加隐藏域: <input type="hidden" name="_method" value="put"></p></li><li><p>在 web.xml 中添加一个过滤器</p></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">filter-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;hiddenHttpMethodFilter&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">filter-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">filter-class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">filter-class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">filter-mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">filter-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;hiddenHttpMethodFilter&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">filter-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url-pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;/*&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url-pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">filter-mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="在-springmvc-中如何使用原生的-servletapi-完成-ajax-请求的响应" tabindex="-1">在 springMVC 中如何使用原生的 ServletAPI 完成 AJAX 请求的响应 ? <a class="header-anchor" href="#在-springmvc-中如何使用原生的-servletapi-完成-ajax-请求的响应" aria-label="Permalink to &quot;在 springMVC 中如何使用原生的 ServletAPI 完成 AJAX 请求的响应 ?&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/ajax&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ajax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletResponse response) throws Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PrintWriter writer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    writer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello ajax im spring mvc2w&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="responsebody-注解-非常重要" tabindex="-1">@ResponseBody 注解 (非常重要) <a class="header-anchor" href="#responsebody-注解-非常重要" aria-label="Permalink to &quot;@ResponseBody 注解 (非常重要)&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/ajax&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@ResponseBody</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ajax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello ajax im spring mvc2w&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>注意: 一旦处理器方法上添加了 @ResponseBody 返回将不再是 逻辑视图名称 ,而是将结果返回给浏览器 底册实现原理代替的就是<br> PrintWriter writer = response.getWriter();<br> writer.print(&quot;hello ajax im spring mvc2w&quot;);<br> 以上使用的 http 消息转换器是 StringHttpMessageConverter</p></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/ajax&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@ResponseBody</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public User </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ajax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   User user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(123</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;zhangsan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1232&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当一个处理器上面有 @ResponseBody 注解,并且返回一个 java 对象,例如 user 对象,那么 springMVC 框架会自动将 user 对象转换成字符串响应给浏览器.<br> 当然,你要在 pom.xml 文件引入 jackson 依赖 <br></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.fasterxml.jackson.core&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;jackson-databind&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2.17.1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>以上使用 HTTP 转换器是: MappingJackson2HttpMessageConverter.</p><h3 id="非常好用的注解-restcontroller" tabindex="-1">非常好用的注解 @RestController <a class="header-anchor" href="#非常好用的注解-restcontroller" aria-label="Permalink to &quot;非常好用的注解 @RestController&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">INFO</p><p>出现在类上 = @Controller + @ResponseBody <br> @RestController 是一个复合注解. <br> 表示该类上自动添加了 @Controller 注解, 并在该类中所有的方法上都会自动添加 @ResponseBody 注解.</p></div>`,86);function y(F,m,v,q,C,b){const n=a("url-pattern"),e=a("servlet-name");return r(),h("div",null,[d,i("p",null,[s("重点："),t(n,null,{default:k(()=>[s(" / ")]),_:1}),s(" / 表示 除了访问 xxx.jsp 结尾的请求路径外的所有路径 也就是说 只要不是 JSP 访问路径，一定会走 DispatcherServlet")]),o,g,c,i("p",null,[s("配置文件默认的名字 "),t(e),s(" 配置文件默认存放的位置 WEB-INF 两个配置： 1 组件扫描 2 配置视图解析器")]),u])}const f=p(E,[["render",y]]);export{B as __pageData,f as default};
