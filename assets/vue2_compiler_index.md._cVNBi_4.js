import{_ as l,c as t,m as s,n,a as i,a4 as e,o as p}from"./chunks/framework.MxCO_SW-.js";const h="_special_text_3suau_2",k="_common_text_3suau_7",r="_red_text_3suau_12",d={special_text:h,common_text:k,red_text:r},v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"vue2/compiler/index.md","filePath":"vue2/compiler/index.md","lastUpdated":1717317883000}'),E={name:"vue2/compiler/index.md"},c=s("h2",{id:"编译入口",tabindex:"-1"},[i("编译入口 "),s("a",{class:"header-anchor",href:"#编译入口","aria-label":'Permalink to "编译入口"'},"​")],-1),o=s("h2",{id:"为什么要这么设计编译入口",tabindex:"-1"},[i("为什么要这么设计编译入口 "),s("a",{class:"header-anchor",href:"#为什么要这么设计编译入口","aria-label":'Permalink to "为什么要这么设计编译入口"'},"​")],-1),y={class:"info custom-block"},g=s("p",{class:"custom-block-title"},"INFO",-1),_=s("br",null,null,-1),A=e(`<h2 id="parse-的整体流程" tabindex="-1">parse 的整体流程 <a class="header-anchor" href="#parse-的整体流程" aria-label="Permalink to &quot;parse 的整体流程&quot;">​</a></h2><p>主要是把 html 代码 转换成 ast 树</p><ol><li>遍历 html 字符串进行解析</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 通过循环遍历 html 模版字符串，依次处理其中的各个标签，以及标签上的属性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @param {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} html html 模版</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @param {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} options 配置项</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseHTML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 这里代码较长，仅提供部分代码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 确保不是在 script、style、textarea 这样的纯文本元素中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lastTag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isPlainTextElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lastTag)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // textEnd === 0 说明在开头找到了</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 分别处理可能找到的注释标签、条件注释标签、Doctype、开始标签、结束标签</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 每处理完一种情况，就会截断（continue）循环，并且重置 html 字符串，将处理过的标签截掉，下一次循环处理剩余的 html 字符串模版</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (textEnd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (textEnd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 能走到这儿，说明虽然在 html 中匹配到到了 &lt;xx，但是这不属于上述几种情况，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 它就只是一个普通的一段文本：&lt;我是文本</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 于是从 html 中找到下一个 &lt;，直到 &lt;xx 是上述几种情况的标签，则结束，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在这整个过程中一直在调整 textEnd 的值，作为 html 中下一个有效标签的开始位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 如果 textEnd &lt; 0，说明 html 中就没找到 &lt;，那说明 html 就是一段文本</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (textEnd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> html</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 将文本内容从 html 模版字符串上截取掉</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (text) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        advance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 处理 script、style、textarea 标签的闭合标签</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2>`,5);function D(a,F,x,u,f,b){return p(),t("div",null,[c,o,s("div",y,[g,s("p",null,[s("span",{class:n(a.$style.red_text)},"Vue.js",2),i(" 在不同的平台下都会有编译的过程，因此编译过程中的依赖的配置"),s("span",{class:n(a.$style.red_text)},"baseOptions",2),i("会有所不同 "),_]),s("p",null,[s("span",{class:n(a.$style.red_text)},"Vue.js",2),i(" 利用了函数柯里化的技巧很好的实现了 "),s("span",{class:n(a.$style.red_text)},"baseOptions",2),i(" 的参数保留。同样，Vuejs 也是利用函数柯里化技巧把 "),s("span",{class:n(a.$style.red_text)},"baseCompile",2),i(" 函数抽出来，把真正编译的过程和其他逻辑如对编译配置处理，缓存处理等剥离开")])]),A])}const m={$style:d},B=l(E,[["render",D],["__cssModules",m]]);export{v as __pageData,B as default};
